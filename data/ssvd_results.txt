Timer unit: 1e-06 s

Total time: 1677.03 s
File: <ipython-input-3-b57477094a4e>
Function: ssvd_vanilla at line 14

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    14                                           def ssvd_vanilla(X,param=None):
    15         1         16.0     16.0      0.0      n, d = X.shape
    16         1          2.0      2.0      0.0      ttypu = 1;ttypv = 1 #threshold type for u,v
    17         1          2.0      2.0      0.0      gamu = 0;gamv = 0   #nonnegative parameter 
    18         1   46887298.0 46887298.0      2.8      u, s, v = np.linalg.svd(X)
    19         1         17.0     17.0      0.0      u0 = u[:,0]
    20         1         11.0     11.0      0.0      v = v.T; v0 = v[:,1]
    21         1          6.0      6.0      0.0      tol = 10**-4
    22         1          2.0      2.0      0.0      niter = 20
    23         1          2.0      2.0      0.0      ud = 1
    24         1          2.0      2.0      0.0      vd = 1
    25         1          2.0      2.0      0.0      iters = 0
    26         1       3950.0   3950.0      0.0      SST = np.sum(X**2)
    27        18         61.0      3.4      0.0      while (ud > tol or vd > tol):
    28        17         33.0      1.9      0.0          iters = iters + 1
    29                                                   
    30                                                   #Updating v
    31        17      20286.0   1193.3      0.0          zv = np.matmul(X.T,u0)
    32        17        746.0     43.9      0.0          wv = abs(zv)**gamv     #data driven weight
    33        17        851.0     50.1      0.0          sigsq = (SST - np.sum(zv**2))/(n*d-d)
    34        17      17338.0   1019.9      0.0          tv = np.sort(np.append(abs(zv**wv),0))
    35        17     574392.0  33787.8      0.0          pv = sum(tv>0)
    36        17       1079.0     63.5      0.0          Bv = np.ones((d+1,1))*np.Inf
    37    214642     700062.0      3.3      0.0          for i in range(0,pv):
    38    214625     649291.0      3.0      0.0              lvc = tv[d-i]
    39    214625   14171640.0     66.0      0.8              para = {'ttyp': ttypv, 'plambda': lvc/wv[wv!=0]}
    40    214625   53304840.0    248.4      3.2              temp2 = thresh(zv[wv!=0],para['ttyp'],para['plambda'])
    41    214625     579516.0      2.7      0.0              vc = temp2
    42    214625 1552980078.0   7235.8     92.6              Bv[i] = sum(sum((X - u0[:,np.newaxis]*vc[:,np.newaxis].T)**2)/sigsq + i*np.log(n*d))
    43        17        843.0     49.6      0.0          Iv = np.argmin(Bv)+1
    44        17      17052.0   1003.1      0.0          temp = np.sort(np.append(abs(zv* wv),0))
    45        17        107.0      6.3      0.0          lv = temp[d-Iv-1]
    46        17       1238.0     72.8      0.0          para['plambda'] = np.multiply(lv, wv[wv!=0])
    47        17       4161.0    244.8      0.0          temp2 = thresh(zv[wv!=0],para['ttyp'],para['plambda'])
    48        17         38.0      2.2      0.0          v1 = temp2
    49        17      44767.0   2633.4      0.0          v1 = v1/np.sqrt(sum(v1**2)) #v_new
    50                                           
    51                                                   #Updating u
    52        17      10729.0    631.1      0.0          zu = np.matmul(X, v1)
    53        17        172.0     10.1      0.0          wu = abs(zu)**gamu
    54        17        410.0     24.1      0.0          sigsq = (SST - sum(zu**2))/(n*d-n)
    55        17        927.0     54.5      0.0          tu = np.sort(np.append(abs(zu**wu),0))
    56        17       2892.0    170.1      0.0          pu = sum(tu>0)
    57        17        452.0     26.6      0.0          Bu = np.ones((n+1,1))*np.Inf
    58       969       3049.0      3.1      0.0          for i in range(0,pu):
    59       952       2992.0      3.1      0.0              luc = tu[n-i]
    60       952      16263.0     17.1      0.0              para = {'ttyp': ttypu, 'plambda': luc/wu[wu!=0]}
    61       952      40521.0     42.6      0.0              temp2 = thresh(zu[wu!=0],para['ttyp'],para['plambda'])
    62       952       2189.0      2.3      0.0              uc = temp2
    63       952    6880680.0   7227.6      0.4              Bu[i] = sum(sum((X - temp2[:,np.newaxis]*v1[:,np.newaxis].T)**2)/sigsq + i*np.log(n*d))
    64        17        484.0     28.5      0.0          Iu = np.argmin(Bu)+1
    65        17       1423.0     83.7      0.0          temp = np.sort(np.append(abs(zu*wu),0))
    66        17         86.0      5.1      0.0          lu = temp[n-Iv-1]
    67        17        263.0     15.5      0.0          para['plambda'] = lu/wu[wu!=0]
    68        17        428.0     25.2      0.0          temp2 = thresh(zu[wu!=0],para['ttyp'],para['plambda'])
    69        17         32.0      1.9      0.0          u1 = temp2
    70        17        473.0     27.8      0.0          u1 = u1/np.sqrt(sum(u1**2)) #u_new
    71                                           
    72        17        790.0     46.5      0.0          ud = np.sqrt(np.sum((u0-u1)**2))
    73        17       1125.0     66.2      0.0          vd = np.sqrt(np.sum((v0-v1)**2))
    74        17         40.0      2.4      0.0          if iters > niter:
    75                                                       print('Fail to converge! Increase the niter!')
    76                                                       break
    77        17         32.0      1.9      0.0          u0 = u1
    78        17         35.0      2.1      0.0          v0 = v1
    79         1          3.0      3.0      0.0      u = u1
    80         1     107520.0 107520.0      0.0      v = v1
    81         1         70.0     70.0      0.0      return u,v,iters